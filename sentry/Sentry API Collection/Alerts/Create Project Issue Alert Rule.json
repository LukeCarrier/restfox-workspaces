{
  "_type": "request",
  "method": "POST",
  "url": "https://sentry.io/api/0/projects/{{organization_slug}}/:project_slug/rules/",
  "body": {
    "mimeType": "application/json",
    "text": "{\n    \"conditions\": [\n        {\n            \"id\": \"sentry.rules.conditions.first_seen_event.FirstSeenEventCondition\",\n            \"label\": \"label...\",\n            \"name\": \"A new issue is created\"\n        }\n    ],\n    \"filters\": [\n        {\n            \"match\": \"co\",\n            \"id\": \"sentry.rules.filters.tagged_event.TaggedEventFilter\",\n            \"key\": \"release\",\n            \"value\": \"23.10.1\",\n            \"name\": \"The event's tags match release contains 23.10.1\"\n        }\n    ],\n    \"actions\": [\n        {\n            \"targetType\": \"Member\",\n            \"fallthroughType\": \"ActiveMembers\",\n            \"id\": \"sentry.mail.actions.NotifyEmailAction\",\n            \"targetIdentifier\": 2090953,\n            \"name\": \"Send a notification to Member\"\n        }\n    ],\n    \"actionMatch\": \"any\",\n    \"filterMatch\": \"all\",\n    \"frequency\": 1440,\n    \"name\": \"Issue Alert via API\",\n    \"owner\": \"team:1168178\",\n    \"createdBy\": {\n        \"id\": 2090953,\n        \"name\": \"dirk.nielsen@sentry.io\",\n        \"email\": \"dirk.nielsen@sentry.io\"\n    },\n    \"environment\": \"production\",\n    \"status\": \"active\",\n    \"snooze\": false\n}"
  },
  "headers": [],
  "parameters": [
    {
      "name": "cursor",
      "value": "0:200:0",
      "disabled": true
    }
  ],
  "authentication": {
    "type": "No Auth"
  },
  "description": "# Create an Issue Alert Rule for a Project\n\n[https://docs.sentry.io/api/alerts/create-an-issue-alert-rule-for-a-project/<br>](https://docs.sentry.io/api/alerts/create-an-issue-alert-rule-for-a-project/)  \nPOST/api/0/projects/{organization_slug}/{project_slug}/rules/\n\nCreate a new issue alert rule for the given project.\n\nAn issue alert rule triggers whenever a new event is received for any issue in a project that matches the specified alert conditions. These conditions can include a resolved issue re-appearing or an issue affecting many users. Alert conditions have three parts:\n\n- Triggers: specify what type of activity you'd like monitored or when an alert should be triggered.\n    \n- Filters: help control noise by triggering an alert only if the issue matches the specified criteria.\n    \n- Actions: specify what should happen when the trigger conditions are met and the filters match.\n    \n\n### Path Parameters\n\n`organization_slug` _(string)_REQUIRED\n\nThe slug of the organization the resource belongs to.\n\n`project_slug` _(string)_REQUIRED\n\nThe slug of the project the resource belongs to.\n\n### Body Parameters\n\n`name` _(string)_REQUIRED\n\nThe name for the rule.\n\n`actionMatch` _(string)_REQUIRED\n\nA string determining which of the conditions need to be true before any filters are evaluated.\n\n- `all` - All conditions must evaluate to true.\n    \n- `any` - At least one of the conditions must evaluate to true.\n    \n- `none` - All conditions must evaluate to false.\n    \n\n`conditions` _(array(object))_REQUIRED\n\nA list of triggers that determine when the rule fires. See below for a list of possible conditions.\n\n**A new issue is created**\n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.first_seen_event.FirstSeenEventCondition\"\n}\n\n ```\n\n**The issue changes state from resolved to unresolved**\n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.regression_event.RegressionEventCondition\"\n}\n\n ```\n\n**The issue is seen more than** **`value`** **times in** **`interval`**\n\n- `value` - An integer\n    \n- `interval` - Valid values are `1m`, `5m`, `15m`, `1h`, `1d`, `1w` and `30d` (`m` for minutes, `h` for hours, `d` for days, and `w` for weeks).\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.event_frequency.EventFrequencyCondition\",\n    \"value\": 500,\n    \"interval\": \"1h\"\n}\n\n ```\n\n**The issue is seen by more than** **`value`** **users in** **`interval`**\n\n- `value` - An integer\n    \n- `interval` - Valid values are `1m`, `5m`, `15m`, `1h`, `1d`, `1w` and `30d` (`m` for minutes, `h` for hours, `d` for days, and `w` for weeks).\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition\",\n    \"value\": 1000,\n    \"interval\": \"15m\"\n}\n\n ```\n\n**The issue affects more than** **`value`** **percent of sessions in** **`interval`**\n\n- `value` - An integer from 0 to 100\n    \n- `interval` - Valid values are `5m`, `10m`, `30m`, and `1h` (`m` for minutes, `h` for hours).\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition\",\n    \"value\": 50,\n    \"interval\": \"10m\"\n}\n\n ```\n\n`actions` _(array(object))_REQUIRED\n\nA list of actions that take place when all required conditions and filters for the rule are met. See below for a list of possible actions.\n\n**Send a notification to Suggested Assignees**\n\n- `fallthroughType` - Who the notification should be sent to if there are no suggested assignees. Valid values are `ActiveMembers`, `AllMembers`, and `NoOne`.\n    \n\nJSONCopied\n\n```\n{\n    \"id\" - \"sentry.mail.actions.NotifyEmailAction\",\n    \"targetType\" - \"IssueOwners\",\n    \"fallthroughType\" - \"ActiveMembers\"\n}\n\n ```\n\n**Send a notification to a Member or a Team**\n\n- `targetType` - One of `Member` or `Team`.\n    \n- `fallthroughType` - Who the notification should be sent to if it cannot be sent to the original target. Valid values are `ActiveMembers`, `AllMembers`, and `NoOne`.\n    \n- `targetIdentifier` - The ID of the Member or Team the notification should be sent to.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.mail.actions.NotifyEmailAction\",\n    \"targetType\": \"Team\"\n    \"fallthroughType\": \"AllMembers\"\n    \"targetIdentifier\": 4524986223\n}\n\n ```\n\n**Send a Slack notification**\n\n- `workspace` - The integration ID associated with the Slack workspace.\n    \n- `channel` - The name of the channel to send the notification to (e.g., #critical, Jane Schmidt).\n    \n- `channel_id` (optional) - The ID of the channel to send the notification to.\n    \n- `tags` - A string of tags to show in the notification, separated by commas (e.g., \"environment, user, my_tag\").\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.slack.notify_action.SlackNotifyServiceAction\",\n    \"workspace\": 293854098,\n    \"channel\": \"#warning\",\n    \"tags\": \"environment,level\"\n}\n\n ```\n\n**Send a Microsoft Teams notification**\n\n- `team` - The integration ID associated with the Microsoft Teams team.\n    \n- `channel` - The name of the channel to send the notification to.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.msteams.notify_action.MsTeamsNotifyServiceAction\",\n    \"team\": 23465424,\n    \"channel\": \"General\"\n}\n\n ```\n\n**Send a Discord notification**\n\n- `server` - The integration ID associated with the Discord server.\n    \n- `channel_id` - The ID of the channel to send the notification to.\n    \n- `tags` - A string of tags to show in the notification, separated by commas (e.g., \"environment, user, my_tag\").\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.discord.notify_action.DiscordNotifyServiceAction\",\n    \"server\": 63408298,\n    \"channel_id\": 94732897,\n    \"tags\": \"browser,user\"\n}\n\n ```\n\n**Create a Jira Ticket**\n\n- `integration` - The integration ID associated with Jira.\n    \n- `project` - The ID of the Jira project.\n    \n- `issuetype` - The ID of the type of issue that the ticket should be created as.\n    \n- `dynamic_form_fields` (optional) - A list of any custom fields you want to include in the ticket as objects.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.jira.notify_action.JiraCreateTicketAction\",\n    \"integration\": 321424,\n    \"project\": \"349719\"\n    \"issueType\": \"1\"\n}\n\n ```\n\n**Create a Jira Server Ticket**\n\n- `integration` - The integration ID associated with Jira Server.\n    \n- `project` - The ID of the Jira Server project.\n    \n- `issuetype` - The ID of the type of issue that the ticket should be created as.\n    \n- `dynamic_form_fields` (optional) - A list of any custom fields you want to include in the ticket as objects.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.jira_server.notify_action.JiraServerCreateTicketAction\",\n    \"integration\": 321424,\n    \"project\": \"349719\"\n    \"issueType\": \"1\"\n}\n\n ```\n\n**Create a GitHub Issue**\n\n- `integration` - The integration ID associated with GitHub.\n    \n- `repo` - The name of the repository to create the issue in.\n    \n- `title` - The title of the issue.\n    \n- `body` (optional) - The contents of the issue.\n    \n- `assignee` (optional) - The GitHub user to assign the issue to.\n    \n- `labels` (optional) - A list of labels to assign to the issue.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.github.notify_action.GitHubCreateTicketAction\",\n    \"integration\": 93749,\n    \"repo\": default,\n    \"title\": \"My Test Issue\",\n    \"assignee\": \"Baxter the Hacker\",\n    \"labels\": [\"bug\", \"p1\"]\n    \"\"\n}\n\n ```\n\n**Create an Azure DevOps work item**\n\n- `integration` - The integration ID.\n    \n- `project` - The ID of the Azure DevOps project.\n    \n- `work_item_type` - The type of work item to create.\n    \n- `dynamic_form_fields` (optional) - A list of any custom fields you want to include in the work item as objects.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.vsts.notify_action.AzureDevopsCreateTicketAction\",\n    \"integration\": 294838,\n    \"project\": \"0389485\",\n    \"work_item_type\": \"Microsoft.VSTS.WorkItemTypes.Task\",\n}\n\n ```\n\n**Send a PagerDuty notification**\n\n- `account` - The integration ID associated with the PagerDuty account.\n    \n- `service` - The ID of the service to send the notification to.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.pagerduty.notify_action.PagerDutyNotifyServiceAction\",\n    \"account\": 92385907,\n    \"service\": 9823924\n}\n\n ```\n\n**Send an Opsgenie notification**\n\n- `account` - The integration ID associated with the Opsgenie account.\n    \n- `team` - The ID of the Opsgenie team to send the notification to.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.integrations.opsgenie.notify_action.OpsgenieNotifyTeamAction\",\n    \"account\": 8723897589,\n    \"team\": \"9438930258-fairy\"\n}\n\n ```\n\n**Send a notification to a service**\n\n- `service` - The plugin slug.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.actions.notify_event_service.NotifyEventServiceAction\",\n    \"service\": \"mail\"\n}\n\n ```\n\n**Send a notification to a Sentry app with a custom webhook payload**\n\n- `settings` - A list of objects denoting the settings each action will be created with. All required fields must be included.\n    \n- `sentryAppInstallationUuid` - The ID for the Sentry app\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.actions.notify_event_sentry_app.NotifyEventSentryAppAction\",\n    \"settings\": [\n        {\"name\": \"title\", \"value\": \"Team Rocket\"},\n        {\"name\": \"summary\", \"value\": \"We're blasting off again.\"},\n    ],\n    \"sentryAppInstallationUuid\": 643522\n    \"hasSchemaFormConfig\": true\n}\n\n ```\n\n**Send a notification (for all legacy integrations)**\n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.actions.notify_event.NotifyEventAction\"\n}\n\n ```\n\n`frequency` _(integer)_REQUIRED\n\nHow often to perform the actions once for an issue, in minutes. The valid range is `5` to `43200`.\n\n`environment` _(string)_\n\nThe name of the environment to filter by.\n\n`filterMatch` _(string)_\n\nA string determining which filters need to be true before any actions take place. Required when a value is provided for `filters`.\n\n- `all` - All filters must evaluate to true.\n    \n- `any` - At least one of the filters must evaluate to true.\n    \n- `none` - All filters must evaluate to false.\n    \n\n`filters` _(array(object))_\n\nA list of filters that determine if a rule fires after the necessary conditions have been met. See below for a list of possible filters.\n\n**The issue is** **`comparison_type`** **than** **`value`** **`time`**\n\n- `comparison_type` - One of `older` or `newer`\n    \n- `value` - An integer\n    \n- `time` - The unit of time. Valid values are `minute`, `hour`, `day`, and `week`.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.age_comparison.AgeComparisonFilter\",\n    \"comparison_type\": \"older\",\n    \"value\": 3,\n    \"time\": \"week\"\n}\n\n ```\n\n**The issue has happened at least** **`value`** **times**\n\n- `value` - An integer\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.issue_occurrences.IssueOccurrencesFilter\",\n    \"value\": 120\n}\n\n ```\n\n**The issue is assigned to No One**\n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.assigned_to.AssignedToFilter\",\n    \"targetType\": \"Unassigned\"\n}\n\n ```\n\n**The issue is assigned to** **`targetType`**\n\n- `targetType` - One of `Team` or `Member`\n    \n- `targetIdentifier` - The target's ID\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.assigned_to.AssignedToFilter\",\n    \"targetType\": \"Member\",\n    \"targetIdentifier\": 895329789\n}\n\n ```\n\n**The event is from the latest release**\n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.latest_release.LatestReleaseFilter\"\n}\n\n ```\n\n**The issue's category is equal to** **`value`**\n\n- `value` - An integer correlated with a category. Valid values are `1` (Error), `2` (Performance), `3` (Profile), `4` (Cron), and `5` (Replay).\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.issue_category.IssueCategoryFilter\",\n    \"value\": 2\n}\n\n ```\n\n**The event's** **`attribute`** **value** **`match`** **`value`**\n\n- `attribute` - Valid values are `message`, `platform`, `environment`, `type`, `error.handled`, `error.unhandled`, `error.main_thread`, `exception.type`, `exception.value`, `user.id`, `user.email`, `user.username`, `user.ip_address`, `http.method`, `http.url`, `http.status_code`, `sdk.name`, `stacktrace.code`, `stacktrace.module`, `stacktrace.filename`, `stacktrace.abs_path`, `stacktrace.package`, `unreal.crashtype`, and `app.in_foreground`.\n    \n- `match` - The comparison operator. Valid values are `eq` (equals), `ne` (does not equal), `sw` (starts with), `ew` (ends with), `co` (contains), `nc` (does not contain), `is` (is set), and `ns` (is not set).\n    \n- `value` - A string. Not required when `match` is `is` or `ns`.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.conditions.event_attribute.EventAttributeCondition\",\n    \"attribute\": \"http.url\",\n    \"match\": \"nc\",\n    \"value\": \"localhost\"\n}\n\n ```\n\n**The event's tags match** **`key`** **`match`** **`value`**\n\n- `key` - The tag\n    \n- `match` - The comparison operator. Valid values are `eq` (equals), `ne` (does not equal), `sw` (starts with), `ew` (ends with), `co` (contains), `nc` (does not contain), `is` (is set), and `ns` (is not set).\n    \n- `value` - A string. Not required when `match` is `is` or `ns`.\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.tagged_event.TaggedEventFilter\",\n    \"key\": \"level\",\n    \"match\": \"eq\"\n    \"value\": \"error\"\n}\n\n ```\n\n**The event's level is** **`match`** **`level`**\n\n- `match` - Valid values are `eq`, `gte`, and `lte`.\n    \n- `level` - Valid values are `50` (fatal), `40` (error), `30` (warning), `20` (info), `10` (debug), `0` (sample).\n    \n\nJSONCopied\n\n```\n{\n    \"id\": \"sentry.rules.filters.level.LevelFilter\",\n    \"match\": \"gte\"\n    \"level\": \"50\"\n}\n\n ```\n\n`owner` _(string)_\n\nThe ID of the team or user that owns the rule.\n\n### Scopes\n\nYou need to [authenticate via bearer auth token.](https://docs.sentry.io/api/auth/) requires one of the following scopes:\n\n- `alerts:write`\n    \n- `project:admin`\n    \n- `project:write`",
  "sortOrder": 0
}
